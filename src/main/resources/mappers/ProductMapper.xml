<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="july.lease.dao.product.ProductMapper">

	<insert id="save">
        <selectKey keyProperty="productId" resultType="Long" order="BEFORE">
            select seq_product_id.nextval
			from dual
        </selectKey>
        insert into product(product_id, member_id, category_id, product_name,
        				    product_price, product_content, location,
        				    product_create_date, product_end_status, product_status, product_visit_count)
		values(#{productId}, #{memberId}, #{categoryId}, #{productName},
			   #{productPrice}, #{productContent}, #{location}, sysdate, 'N', 1, 0)
    </insert>
    
	<select id="findByProductId" resultType="Product">
		select product_id, member_id, category_id, product_name,
			   product_price, product_content, location,
        	   product_create_date, product_end_status, product_status
			   from product
			   where product_id = #{productId}
	</select>
	
	
	<select id="findAllForHome" resultType="Product">
		select product_id, product_name, product_price
		from product
	</select>
	
	<select id="findByProductIdForEdit" resultType="Product">
		select a.member_id, a.product_name, a.product_price,
			   b.category_id, b.category_id3, a.product_content,
			   a.product_end_status, a.location
		from product a
		inner join category b
    		on a.category_id = b.category_id
		where a.product_id = #{productId}
	</select>
	
	<select id="findRoomNo" resultType="Long">
		select room_no
		from message
		where my_id=#{myId} and product_id=#{productId}
	</select>
	
	<update id="editProduct">
		update product
		set category_id = #{product.categoryId},
    		product_name = #{product.productName},
    		product_price = #{product.productPrice},
    		product_content = #{product.productContent}
		where product_id = #{productId}
	</update>
	
	<select id="findByMemberIdExceptProductWithProductId" resultType="july.lease.dto.ProductListDto">
		SELECT member_nickname, product_id, product_name, 
			   product_price, upload_image_name, store_image_name
		FROM (
		  SELECT
		    b.member_nickname,
		    a.product_id,
		    a.product_name,
		    a.product_price,
		    c.upload_image_name,
		    c.store_image_name,
		    c.product_image_id,
		    a.product_create_date,
		    ROW_NUMBER() OVER (PARTITION BY a.product_id ORDER BY c.product_image_id) AS rn
		  FROM product a
		  LEFT JOIN member b ON a.member_id = b.member_id
		  LEFT JOIN product_image c ON a.product_id = c.product_id
		  WHERE b.member_id = #{memberId} AND a.product_id != #{productId}
		)
		WHERE rn = 1
		ORDER BY product_create_date DESC
	</select>

	<select id="findByProductIdForProductDetail" resultType="Product">
		select a.member_id, a.product_name, a.product_price,
			   b.category_id, b.category_id2, b.category_name, a.product_content,
			   a.product_end_status, a.location
		from product a
		inner join category b
    		on a.category_id = b.category_id
		where a.product_id = #{productId}
	</select>
	
	<update id="delete">
		update product
		set product_end_status = 'Y'
		where product_id = #{productId}
	</update>

</mapper>